// Generated by CoffeeScript 1.6.3
(function() {
  var clrs, context, factorSet, factory, fnode, stage,
    _this = this;

  stage = new Kinetic.Stage({
    container: 'container',
    width: $(window).width() * 0.95,
    height: $(window).height() * 0.95
  });

  context = new Psy.KineticContext(stage);

  factory = new Psy.KineticStimFactory();

  clrs = ["red", "orange", "purple", "brown", "white", "black", "darkblue", "lightblue", "yellow", "pink", "darkgreen", "lightgreen"];

  factorSet = {
    probe: {
      levels: ["match", "mismatch"]
    },
    load: {
      levels: [1, 2, 3]
    }
  };

  this.coordSampler = new Psy.GridSampler([2, 3, 4], [2, 3, 4]);

  this.colorSampler = new Psy.ExhaustiveSampler(clrs);

  window.display = {
    Display: {
      Trial: function(trial) {
        var colors, i, pos, probeColor, probeIndex, probePos, setdiff, _i, _ref, _results;
        pos = coordSampler.take(trial.load);
        colors = colorSampler.take(trial.load);
        probeIndex = Psy.sample((function() {
          _results = [];
          for (var _i = 0, _ref = trial.load; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this), 1);
        probePos = pos[probeIndex];
        if (trial.probe === "match") {
          probeColor = colors[probeIndex];
        } else {
          setdiff = _.difference(clrs, [colors[probeIndex]]);
          console.log("setdiff is", setdiff);
          console.log("all colors", clrs);
          probeColor = Psy.sample(setdiff, 1)[0];
        }
        console.log("probe color", probeColor);
        console.log("trial.probe", trial.probe);
        return {
          Events: {
            1: {
              FixationCross: {
                length: 100,
                strokeWidth: 5
              },
              Next: {
                Timeout: {
                  duration: 800
                }
              }
            },
            2: {
              Group: {
                stims: (function() {
                  var _j, _ref1, _results1;
                  _results1 = [];
                  for (i = _j = 0, _ref1 = pos.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
                    _results1.push({
                      Rectangle: {
                        position: pos[i],
                        width: 50,
                        height: 50,
                        fill: colors[i]
                      }
                    });
                  }
                  return _results1;
                })(),
                layout: {
                  Grid: [7, 7]
                }
              },
              Next: {
                Timeout: {
                  duration: 1500
                }
              }
            },
            3: {
              Clear: {
                x: 0
              },
              Next: {
                Timeout: {
                  duration: 800
                }
              }
            },
            4: {
              Group: {
                stims: [
                  {
                    Rectangle: {
                      position: probePos,
                      width: 50,
                      height: 50,
                      fill: probeColor
                    }
                  }
                ],
                layout: {
                  Grid: [7, 7]
                }
              },
              Next: {
                KeyPressed: {
                  keys: ['n', 'm'],
                  correct: trial.probe === "match" ? 'n' : 'm',
                  timeout: 3000
                }
              }
            }
          }
        };
      }
    }
  };

  fnode = Psy.FactorSetNode.build(factorSet);

  window.trials = fnode.trialList(5, 5);

  window.trials.shuffle();

  window.iter = trials.blockIterator();

  console.log("trials", trials);

  window.pres = new Psy.Presenter(trials, display.Display, factory);

  console.log("pres", pres);

  pres.start(context);

}).call(this);

/*
//@ sourceMappingURL=runner.map
*/
