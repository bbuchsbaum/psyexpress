// Generated by CoffeeScript 1.6.3
(function() {
  var b, clear, g, i, r,
    _this = this;

  this.stage = new Kinetic.Stage({
    container: 'container',
    width: $("#container").width(),
    height: 800
  });

  this.context = new Psy.KineticContext(stage);

  this.ClearEvent = new Psy.Event(new Psy.Clear(), new Psy.Timeout({
    duration: 1000
  }));

  this.Timeout1000 = new Psy.Timeout({
    duration: 1000
  });

  this.SpaceKey = new Psy.SpaceKeyResponse();

  this.SpaceOrTimeout5000 = new Psy.FirstResponse([
    new Psy.Timeout({
      duration: 5000
    }), SpaceKey
  ]);

  this.gridlayout = new Psy.GridLayout(8, 8, {
    x: 0,
    y: 0,
    width: this.stage.getWidth(),
    height: this.stage.getHeight()
  });

  this.makeTrial = function(stim, resp, bg) {
    var _this = this;
    if (bg == null) {
      bg = new Psy.Background([], "white");
    }
    return function() {
      console.log("starting trial!");
      stim.reset();
      resp.reset();
      return new Psy.Trial([new Psy.Event(stim, resp), ClearEvent], {}, bg);
    };
  };

  this.wrapEvents = function(events, bg) {
    var _this = this;
    if (bg == null) {
      bg = new Psy.Background([], "white");
    }
    return function() {
      return new Psy.Trial(events.concat(ClearEvent), {}, bg);
    };
  };

  this.genColoredSquareTrial = function(load) {
    var makeGroup, s1a, s1b, s2, s3;
    if (load == null) {
      load = 4;
    }
    s1a = new Psy.ExhaustiveSampler([1, 2, 3, 4, 5, 6]);
    s1b = new Psy.ExhaustiveSampler([1, 2, 3, 4, 5, 6]);
    s2 = new Psy.CombinatoricSampler(s1a, s1b);
    s3 = new Psy.ExhaustiveSampler(["red", "yellow", "orange", "blue", "pink", "brown", "black", "purple", "aqua", "fuchsia", "gray"]);
    makeGroup = function(gloc, cols) {
      var i, stims;
      stims = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = gloc.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(new Psy.Rectangle({
            position: gloc[i],
            width: 50,
            height: 50,
            fill: cols[i]
          }));
        }
        return _results;
      })();
      return new Psy.Group(stims, gridlayout);
    };
    return function() {
      var cols, ev1, ev2, ev3, fill, gloc, group, index, probeGroup, _i, _results;
      gloc = s2.take(4);
      cols = s3.take(4);
      group = makeGroup(gloc, cols);
      if (Math.random() > .5) {
        index = _.shuffle((function() {
          _results = [];
          for (var _i = 0; 0 <= load ? _i < load : _i > load; 0 <= load ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this))[0];
        console.log("index", index);
        console.log("old cols", cols);
        cols[index] = s3.take(1)[0];
        console.log("new cols", cols);
        probeGroup = makeGroup(gloc, cols);
      } else {
        console.log("no change!", index);
        probeGroup = makeGroup(gloc, cols);
      }
      ev1 = new Psy.Event(group, Timeout1000);
      ev2 = new Psy.Event(new Psy.Clear(), new Psy.Timeout({
        duration: 1000
      }));
      ev3 = new Psy.Event(probeGroup, Timeout1000);
      return new Psy.Trial([ev1, ev2, ev3, ClearEvent], {}, new Psy.Background([], fill = "white"));
    };
  };

  this.testSet = {
    FixationCross: {
      "Default Fixation": makeTrial(new Psy.FixationCross(), SpaceOrTimeout5000),
      "Blue Fixation": makeTrial(new Psy.FixationCross({
        fill: "blue"
      }), SpaceOrTimeout5000),
      "Fixation 200px": makeTrial(new Psy.FixationCross({
        length: 200
      }), SpaceOrTimeout5000),
      "Fixation stroke width 20px": makeTrial(new Psy.FixationCross({
        strokeWidth: 20
      }), SpaceOrTimeout5000)
    },
    Text: {
      "Positioning with Labels": makeTrial(new Psy.Group([
        new Psy.Text({
          content: "Center",
          position: "center",
          fontSize: 20
        }), new Psy.Text({
          content: "Center Left",
          position: "center-left",
          fontSize: 20
        }), new Psy.Text({
          content: "Center Right",
          position: "center-right",
          fontSize: 20
        }), new Psy.Text({
          content: "Top Left",
          position: "top-left",
          fontSize: 20
        }), new Psy.Text({
          content: "Top Right",
          position: "top-right",
          fontSize: 20
        }), new Psy.Text({
          content: "Top Center",
          position: "top-center",
          fontSize: 20
        }), new Psy.Text({
          content: "Bottom Left",
          position: "bottom-left",
          fontSize: 20
        }), new Psy.Text({
          content: "Bottom Right",
          position: "bottom-right",
          fontSize: 20
        }), new Psy.Text({
          content: "Bottom Center",
          position: "bottom-center",
          fontSize: 20
        })
      ]), SpaceKey),
      "75 Point Font": makeTrial(new Psy.Text({
        content: "75 Point Font",
        position: "center",
        fontSize: 75
      }), SpaceKey),
      "12 Point Font": makeTrial(new Psy.Text({
        content: "12 Point Font",
        position: "center",
        fontSize: 12
      }), SpaceKey),
      "Paragraph": makeTrial(new Psy.Text({
        content: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n        sunt in culpa qui officia deserunt mollit anim id est laborum.",
        width: 800,
        fontSize: 24
      }), SpaceKey)
    },
    Markdown: {
      "Basic Example": makeTrial(new Psy.Markdown('\nA First Level Header\n===================\nA Second Level Header\n---------------------\n### Header 3\n\n\nNow is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.\n\nThe quick brown fox jumped over the lazy\ndog\'s back.\n\n> This is a blockquote.\n>\n> This is the second paragraph in the blockquote.\n>\n> ## This is an H2 in a blockquote\n\n![alt text](http://www.html5canvastutorials.com/demos/assets/yoda.jpg "Title")\n\n'), SpaceKey)
    },
    Blank: {
      "Black Background": makeTrial(new Psy.Blank({
        fill: "black"
      }), SpaceOrTimeout5000),
      "Green Background": makeTrial(new Psy.Blank({
        fill: "green"
      }), SpaceOrTimeout5000),
      "RGB (33, 55, 67)": makeTrial(new Psy.Blank({
        fill: "rgb(33,55,67)"
      }), SpaceOrTimeout5000)
    },
    CanvasBorder: {
      "Default": makeTrial(new Psy.CanvasBorder(), SpaceKey),
      "Blue Border": makeTrial(new Psy.CanvasBorder({
        stroke: "blue"
      }), SpaceKey),
      "Thick Blue Border": makeTrial(new Psy.CanvasBorder({
        stroke: "blue",
        strokeWidth: 20
      }), SpaceKey)
    },
    GridLines: {
      "Default GridLines": makeTrial(new Psy.GridLines(), SpaceKey),
      "5 X 5 GridLines": makeTrial(new Psy.GridLines({
        rows: 5,
        cols: 5
      }), SpaceKey),
      "5 X 5 Dashed GridLines": makeTrial(new Psy.GridLines({
        rows: 5,
        cols: 5,
        dashArray: [10, 5]
      }), SpaceKey)
    },
    Rectangle: {
      "Default Rect": makeTrial(new Psy.Rectangle(), SpaceKey),
      "Green Square 500 by 500": makeTrial(new Psy.Rectangle({
        width: 500,
        height: 500,
        fill: "green"
      }), SpaceOrTimeout5000),
      "Green Square Blue Stroke": makeTrial(new Psy.Rectangle({
        width: 500,
        height: 500,
        fill: "green",
        stroke: "blue"
      }), SpaceOrTimeout5000),
      "Default Rect, x 50%, y 50%": makeTrial(new Psy.Rectangle({
        position: ["50%", "50%"]
      }), SpaceKey),
      "Default Rect, grid 3,3 [0,0]": makeTrial(new Psy.Rectangle({
        position: [0, 0],
        layout: new Psy.GridLayout(3, 3, {
          x: 0,
          y: 0,
          width: 800,
          height: 800
        })
      }), SpaceKey),
      "Default Rect, grid 3,3 [2,2]": makeTrial(new Psy.Rectangle({
        position: [2, 2],
        layout: new Psy.GridLayout(3, 3, {
          x: 0,
          y: 0,
          width: stage.getWidth(),
          height: stage.getHeight()
        })
      }), SpaceKey)
    },
    Circle: {
      "Default Circle": makeTrial(new Psy.Circle(), SpaceKey),
      "Green Circle Radius 50": makeTrial(new Psy.Circle({
        radius: 50,
        fill: "green"
      }), SpaceOrTimeout5000),
      "Green Circle Blue Stroke": makeTrial(new Psy.Circle({
        radius: 50,
        fill: "green",
        stroke: "blue"
      }), SpaceOrTimeout5000)
    },
    Arrow: {
      "Default Arrow": makeTrial(new Psy.Arrow(), SpaceKey),
      "Blue Arrow, length 200": makeTrial(new Psy.Arrow({
        length: 200,
        fill: "blue"
      }), SpaceKey),
      "Blue Arrow, black stroke": makeTrial(new Psy.Arrow({
        length: 200,
        fill: "blue",
        stroke: "black",
        strokeWidth: 4
      }), SpaceKey),
      "Rotating Arrow": makeTrial(new Psy.Sequence((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 360; i = _i += 2) {
          _results.push(new Psy.Arrow({
            x: 300,
            y: 300,
            length: 200,
            fill: "black",
            angle: i
          }));
        }
        return _results;
      })(), [40]), SpaceKey),
      "Rotating Arrow no clear": makeTrial(new Psy.Sequence((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 360; i = _i += 2) {
          _results.push(new Psy.Arrow({
            x: 300,
            y: 300,
            length: 200,
            fill: "black",
            angle: i,
            opacity: i / 720
          }));
        }
        return _results;
      })(), [40], clear = false), SpaceKey)
    },
    Picture: {
      "Default Picture": makeTrial(new Psy.Picture(), SpaceKey),
      "Default 300 X 300": makeTrial(new Psy.Picture({
        width: 300,
        height: 300
      }), SpaceKey)
    },
    StartButton: {
      "Start Button": makeTrial(new Psy.StartButton({
        id: "start"
      }), new Psy.ClickResponse("start"))
    },
    MultipleChoice: {
      "Default MChoice": makeTrial(new Psy.MultipleChoice(), SpaceKey)
    },
    Group: {
      "Group of Circles": makeTrial(new Psy.Group([
        new Psy.Circle({
          x: 100,
          y: 150,
          radius: 70
        }), new Psy.Circle({
          x: 250,
          y: 150,
          radius: 70
        }), new Psy.Circle({
          x: 400,
          y: 150,
          radius: 70
        })
      ]), SpaceKey),
      "Overlapping Circles": makeTrial(new Psy.Group([
        new Psy.Circle({
          x: 100,
          y: 150,
          radius: 100,
          opacity: 1,
          fill: "red"
        }), new Psy.Circle({
          x: 250,
          y: 150,
          radius: 100,
          opacity: .5,
          fill: "yellow"
        }), new Psy.Circle({
          x: 175,
          y: 250,
          radius: 100,
          opacity: .5,
          fill: "blue"
        })
      ]), SpaceKey),
      "Colored Squares": makeTrial(new Psy.Group([
        new Psy.Rectangle({
          x: 100,
          y: 50,
          width: 50,
          height: 50,
          fill: "red"
        }), new Psy.Rectangle({
          x: 250,
          y: 500,
          width: 50,
          height: 50,
          fill: "orange"
        }), new Psy.Rectangle({
          x: 200,
          y: 300,
          width: 50,
          height: 50,
          fill: "cyan"
        }), new Psy.Rectangle({
          x: 65,
          y: 250,
          width: 50,
          height: 50,
          fill: "pink"
        })
      ]), SpaceKey),
      "Colored Squares on Grid": makeTrial(new Psy.Group([
        new Psy.Rectangle({
          position: [0, 0],
          width: 50,
          height: 50,
          fill: "red"
        }), new Psy.Rectangle({
          position: [2, 2],
          width: 60,
          height: 60,
          fill: "orange"
        }), new Psy.Rectangle({
          position: [4, 4],
          width: 70,
          height: 70,
          fill: "cyan"
        }), new Psy.Rectangle({
          position: [6, 6],
          width: 80,
          height: 80,
          fill: "pink"
        })
      ], gridlayout), SpaceKey),
      "VSTM Example Trial": genColoredSquareTrial()
    },
    Sequence: {
      "Count to Three": makeTrial(new Psy.Sequence([
        new Psy.Text({
          content: "One",
          position: "center"
        }), new Psy.Text({
          content: "Two",
          position: "center"
        }), new Psy.Text({
          content: "Three",
          position: "center"
        })
      ], [1000, 2000, 4000]), SpaceKey),
      "Count to Three with Overlay": makeTrial(new Psy.Sequence([
        new Psy.Text({
          content: "One",
          position: "center-left"
        }), new Psy.Text({
          content: "Two",
          position: "center"
        }), new Psy.Text({
          content: "Three",
          position: "center-right"
        })
      ], [1000, 2000, 4000], clear = false), SpaceKey),
      "Fast Countdown": makeTrial(new Psy.Sequence((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 50; _i >= 0; i = --_i) {
          r = i * 4;
          g = 255 - (i * 4);
          b = i;
          _results.push(new Psy.Text({
            content: i,
            position: "center",
            fontSize: 80 + i * 2,
            fill: "rgb(" + r + "," + g + "," + b + ")"
          }));
        }
        return _results;
      })(), [80]), SpaceKey),
      "Repeating Squares": makeTrial(new Psy.Sequence([
        new Psy.Rectangle({
          position: [2, 2],
          width: 80,
          height: 80,
          fill: "red",
          layout: gridlayout
        }), new Psy.Rectangle({
          position: [2, 3],
          width: 80,
          height: 80,
          fill: "blue",
          layout: gridlayout
        }), new Psy.Rectangle({
          position: [2, 4],
          width: 80,
          height: 80,
          fill: "yellow",
          layout: gridlayout
        })
      ], [100], true, 9), SpaceKey)
    },
    Background: {
      "Background fill": wrapEvents([
        new Psy.Event(new Psy.Text({
          content: "Hello,"
        }), Timeout1000), new Psy.Event(new Psy.Text({
          content: "How"
        }), Timeout1000), new Psy.Event(new Psy.Text({
          content: "are"
        }), Timeout1000), new Psy.Event(new Psy.Text({
          content: "you"
        }), Timeout1000), new Psy.Event(new Psy.Text({
          content: "Today"
        }), SpaceKey)
      ], new Psy.Background([
        new Psy.Text({
          content: "I am a background stimulus",
          position: "bottom-center"
        })
      ], "red"))
    },
    TextInput: {
      "Default TextInput": makeTrial(new Psy.TextInput(), SpaceKey),
      "Larger Text Input": makeTrial(new Psy.TextInput({
        width: 300,
        height: 74
      }), SpaceKey),
      "Even Larger Text Input": makeTrial(new Psy.TextInput({
        width: 500,
        height: 150
      }), SpaceKey),
      "Gigantic Text Input": makeTrial(new Psy.TextInput({
        width: 800,
        height: 300
      }), SpaceKey)
    },
    Dialogs: {
      "Prompt": makeTrial(Timeout1000, new Psy.Prompt({
        title: "How old are you?"
      })),
      "Confirm": makeTrial(Timeout1000, new Psy.Confirm({
        message: "Do you want to continue?"
      }))
    }
  };

  this.activeTrial = null;

  window.updateTests = function(name) {
    var key, subels, testlist, value;
    subels = testSet[name];
    testlist = $("#test_list");
    testlist.children().not("#test_header").remove();
    for (key in subels) {
      value = subels[key];
      testlist.append("<li><button class='button btn-link' type='button' category=" + name + ">" + key + "</button></li>");
    }
    return $("#test_list > li button").click(function(e) {
      var category, trial;
      key = $(this).text();
      console.log(key);
      category = $(this).attr("category");
      trial = testSet[category][key];
      if (this.activeTrial) {
        this.activeTrial.stop();
      }
      this.activeTrial = trial();
      console.log(trial);
      this.activeTrial.start(context);
      return console.log(e);
    });
  };

  $(document).ready(function() {
    var categories, key, value;
    categories = $("#parent_list");
    for (key in testSet) {
      value = testSet[key];
      categories.append("<li><a href='#'>" + key + "</a></li>");
    }
    return $("#parent_list > li").click(function(e) {
      var cur, name;
      cur = $("#parent_list .active");
      cur.removeClass("active");
      cur.children("li").hide();
      $(this).addClass("active");
      name = $(this).text();
      name = name.replace(/\s+/g, "");
      return updateTests(name);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=testItems.map
*/
