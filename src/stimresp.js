// Generated by CoffeeScript 1.6.3
(function() {
  var Module, Response, Stimulus, lay, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('lodash');

  lay = require("./layout");

  Module = require("./module").Module;

  exports.Stimulus = Stimulus = (function(_super) {
    __extends(Stimulus, _super);

    Stimulus.prototype.base = {
      x: 0,
      y: 0,
      origin: "top-left"
    };

    Stimulus.prototype.defaults = {};

    function Stimulus(spec) {
      var _ref;
      if (spec == null) {
        spec = {};
      }
      this.spec = _.defaults(spec, this.defaults);
      this.spec = _.defaults(spec, this.base);
      this.spec = _.omit(this.spec, function(value, key) {
        return value == null;
      });
      this.name = this.constructor.name;
      if (((_ref = this.spec) != null ? _ref.id : void 0) != null) {
        this.id = this.spec.id;
      } else {
        this.id = _.uniqueId("stim_");
      }
      this.stopped = false;
      if (this.spec.layout != null) {
        this.layout = this.spec.layout;
      } else {
        this.layout = new lay.AbsoluteLayout();
      }
      this.overlay = false;
      this.name = this.constructor.name;
    }

    Stimulus.prototype.xyoffset = function(origin, nodeWidth, nodeHeight) {
      console.log("origin:", origin);
      console.log("node width:", nodeWidth);
      console.log("node height:", nodeHeight);
      switch (origin) {
        case "center":
          return [-nodeWidth / 2, -nodeHeight / 2];
        case "center-left" || "left-center":
          return [0, -nodeHeight / 2];
        case "center-right" || "right-center":
          return [-nodeWidth, -nodeHeight / 2];
        case "top-left" || "left-top":
          return [0, 0];
        case "top-right" || "right-top":
          return [-nodeWidth, 0];
        case "top-center" || "center-top":
          return [-nodeWidth / 2, 0];
        case "bottom-left" || "left-bottom":
          return [0, -nodeHeight];
        case "bottom-right" || "right-bottom":
          return [-nodeWidth, -nodeHeight];
        case "bottom-center" || "center-bottom":
          return [-nodeWidth / 2, -nodeHeight];
      }
    };

    Stimulus.prototype.computeCoordinates = function(context, position, nodeWidth, nodeHeight) {
      var xy, xyoff;
      if (nodeWidth == null) {
        nodeWidth = 0;
      }
      if (nodeHeight == null) {
        nodeHeight = 0;
      }
      console.log("origin is ", this.spec.origin);
      xy = position ? (console.log("position label is ", position), this.layout.computePosition([context.width(), context.height()], position)) : this.spec.x && this.spec.y ? [this.spec.x, this.spec.y] : [0, 0];
      if (this.spec.origin != null) {
        xyoff = this.xyoffset(this.spec.origin, nodeWidth, nodeHeight);
        console.log("offset", xyoff);
        console.log("xy", xy);
        console.log("xy[0] + xyoff[0] = ", xy[0] + xyoff[0]);
        xy[0] = xy[0] + xyoff[0];
        xy[1] = xy[1] + xyoff[1];
        console.log("xyfinal", xy);
      }
      return xy;
    };

    Stimulus.prototype.reset = function() {
      return this.stopped = false;
    };

    Stimulus.prototype.render = function(context, layer) {};

    Stimulus.prototype.stop = function(context) {
      return this.stopped = true;
    };

    return Stimulus;

  })(Module);

  exports.Response = Response = (function(_super) {
    __extends(Response, _super);

    function Response() {
      _ref = Response.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Response.prototype.start = function(context) {
      return this.activate(context);
    };

    Response.prototype.activate = function(context) {};

    return Response;

  })(Stimulus);

}).call(this);
