// Generated by CoffeeScript 1.6.3
(function() {
  var Module, Response, Stimulus, lay, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('lodash');

  lay = require("./layout");

  Module = require("./module").Module;

  exports.Stimulus = Stimulus = (function(_super) {
    __extends(Stimulus, _super);

    Stimulus.prototype.defaults = {};

    function Stimulus(spec) {
      var _ref;
      if (spec == null) {
        spec = {};
      }
      this.spec = _.defaults(spec, this.defaults);
      this.spec = _.omit(this.spec, function(value, key) {
        return !value;
      });
      this.name = this.constructor.name;
      if (((_ref = this.spec) != null ? _ref.id : void 0) != null) {
        this.id = this.spec.id;
      } else {
        this.id = _.uniqueId("stim_");
      }
      this.stopped = false;
      this.layout = new lay.AbsoluteLayout();
      this.overlay = false;
      this.name = this.constructor.name;
    }

    Stimulus.prototype.computeCoordinates = function(context, position) {
      var cpos;
      if (position) {
        cpos = this.layout.computePosition([context.width(), context.height()], position);
        return cpos;
      } else if (this.spec.x && this.spec.y) {
        return [this.spec.x, this.spec.y];
      } else {
        return [0, 0];
      }
    };

    Stimulus.prototype.reset = function() {
      return this.stopped = false;
    };

    Stimulus.prototype.render = function(context, layer) {};

    Stimulus.prototype.stop = function(context) {
      return this.stopped = true;
    };

    return Stimulus;

  })(Module);

  exports.Response = Response = (function(_super) {
    __extends(Response, _super);

    function Response() {
      _ref = Response.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Response.prototype.start = function(context) {
      return this.activate(context);
    };

    Response.prototype.activate = function(context) {};

    return Response;

  })(Stimulus);

}).call(this);

/*
//@ sourceMappingURL=stimresp.map
*/
