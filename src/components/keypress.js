// Generated by CoffeeScript 1.6.3
(function() {
  var KeyPress, Q, Response, SpaceKey, i, keyTable, utils, _i, _j, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Q = require("q");

  Response = require("../stimresp").Response;

  utils = require("../utils");

  keyTable = {
    8: 'backspace',
    9: 'tab',
    13: 'enter',
    16: 'shift',
    17: 'ctrl',
    18: 'alt',
    20: 'capslock',
    27: 'esc',
    32: 'space',
    33: 'pageup',
    34: 'pagedown',
    35: 'end',
    36: 'home',
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down',
    45: 'ins',
    46: 'del',
    91: 'meta',
    93: 'meta',
    224: 'meta',
    106: '*',
    107: '+',
    109: '-',
    110: '.',
    111: '/',
    186: ';',
    187: '=',
    188: ',',
    189: '-',
    190: '.',
    191: '/',
    192: '`',
    219: '[',
    220: "\\",
    221: ']'
  };

  for (i = _i = 1; _i < 20; i = ++_i) {
    keyTable[111 + i] = 'f' + i;
  }

  for (i = _j = 1; _j <= 9; i = ++_j) {
    keyTable[i + 96];
  }

  KeyPress = (function(_super) {
    __extends(KeyPress, _super);

    function KeyPress() {
      _ref = KeyPress.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    KeyPress.prototype.defaults = {
      keys: ['1', '2'],
      correct: ['1']
    };

    KeyPress.prototype.activate = function(context) {
      var deferred, keyStream, myname,
        _this = this;
      this.startTime = utils.getTimestamp();
      myname = this.name;
      deferred = Q.defer();
      keyStream = context.keypressStream();
      keyStream.filter(function(event) {
        var char;
        char = String.fromCharCode(event.keyCode);
        return _.contains(_this.spec.keys, char);
      }).take(1).onValue(function(filtered) {
        var Acc, resp, timestamp;
        Acc = _.contains(_this.spec.correct, String.fromCharCode(filtered.keyCode));
        timestamp = utils.getTimestamp();
        resp = {
          name: myname,
          id: _this.id,
          KeyTime: timestamp,
          RT: timestamp - _this.startTime,
          Accuracy: Acc,
          KeyChar: String.fromCharCode(filtered.keyCode)
        };
        context.pushData(resp);
        return deferred.resolve(resp);
      });
      return deferred.promise;
    };

    return KeyPress;

  })(Response);

  exports.KeyPress = KeyPress;

  SpaceKey = (function(_super) {
    __extends(SpaceKey, _super);

    function SpaceKey() {
      _ref1 = SpaceKey.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    SpaceKey.prototype.activate = function(context) {
      var deferred, keyStream,
        _this = this;
      deferred = Q.defer();
      keyStream = context.keypressStream();
      keyStream.filter(function(event) {
        return event.keyCode === 32;
      }).take(1).onValue(function(event) {
        return deferred.resolve(event);
      });
      return deferred.promise;
    };

    return SpaceKey;

  })(Response);

  exports.SpaceKey = SpaceKey;

}).call(this);
