// Generated by CoffeeScript 1.6.3
(function() {
  var Canvas, ComponentFactory, DefaultComponentFactory, Html, Module, key, value, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Module = require("../module").Module;

  _ = require('lodash');

  Canvas = require("./canvas/canvas").Canvas;

  Html = require("./html/html").Html;

  ComponentFactory = (function(_super) {
    __extends(ComponentFactory, _super);

    function ComponentFactory(context) {
      this.context = context;
    }

    ComponentFactory.prototype.buildStimulus = function(spec) {
      var params, stimType;
      stimType = _.keys(spec)[0];
      params = _.values(spec)[0];
      return this.makeStimulus(stimType, params);
    };

    ComponentFactory.prototype.buildResponse = function(spec) {
      var params, responseType;
      responseType = _.keys(spec)[0];
      params = _.values(spec)[0];
      return this.makeResponse(responseType, params);
    };

    ComponentFactory.prototype.buildEvent = function(spec) {
      var response, responseSpec, stim, stimSpec;
      stimSpec = _.omit(spec, "Next");
      responseSpec = _.pick(spec, "Next");
      stim = this.buildStimulus(stimSpec);
      response = this.buildResponse(responseSpec.Next);
      return this.makeEvent(stim, response);
    };

    ComponentFactory.prototype.make = function(name, params) {
      throw new Error("unimplemented");
    };

    ComponentFactory.prototype.makeStimulus = function(name, params) {
      throw new Error("unimplemented");
    };

    ComponentFactory.prototype.makeResponse = function(name, params) {
      throw new Error("unimplemented");
    };

    ComponentFactory.prototype.makeEvent = function(stim, response) {
      throw new Error("unimplemented");
    };

    ComponentFactory.prototype.makeLayout = function(name, params) {};

    return ComponentFactory;

  })(Module);

  exports.ComponentFactory = ComponentFactory;

  DefaultComponentFactory = (function(_super) {
    __extends(DefaultComponentFactory, _super);

    function DefaultComponentFactory() {
      this.registry = _.merge(Canvas, Html);
    }

    DefaultComponentFactory.prototype.make = function(name, params) {};

    return DefaultComponentFactory;

  })(ComponentFactory);

  _ref = new DefaultComponentFactory().registry;
  for (key in _ref) {
    value = _ref[key];
    console.log(key, value);
  }

}).call(this);
