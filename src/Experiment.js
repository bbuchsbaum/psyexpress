// Generated by CoffeeScript 1.4.0
(function() {
  var Bacon, Blank, CanvasBorder, Event, FixationCross, KeypressResponse, KineticContext, MousepressResponse, Prompt, Psy, Q, Response, Sound, StartButton, Stimulus, Text, Timeout, Trial, TypedResponse, doTimer, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Psy = require("./Psytools");

  Bacon = require("./lib/Bacon").Bacon;

  _ = require('lodash');

  Q = require("q");

  doTimer = function(length, resolution, oninstance, oncomplete) {
    var count, instance, speed, start, steps;
    instance = function() {
      var diff;
      if (count++ === steps) {
        return oncomplete(steps, count);
      } else {
        oninstance(steps, count);
        diff = (new Date().getTime() - start) - (count * speed);
        return window.setTimeout(instance, speed - diff);
      }
    };
    steps = (length / 100) * (resolution / 10);
    speed = length / steps;
    count = 0;
    start = new Date().getTime();
    return window.setTimeout(instance, speed);
  };

  exports.Response = Response = (function() {

    function Response() {}

    Response.delay = function(ms, func) {
      return setTimeout(func, ms);
    };

    return Response;

  })();

  exports.Timeout = Timeout = (function(_super) {

    __extends(Timeout, _super);

    function Timeout(duration) {
      this.duration = duration;
    }

    Timeout.prototype.activate = function(context) {
      return Q.delay(this.duration);
    };

    return Timeout;

  })(Response);

  exports.Prompt = Prompt = (function(_super) {

    __extends(Prompt, _super);

    function Prompt(spec) {
      this.spec = spec != null ? spec : {};
      this.spec = _.defaults(this.spec, {
        title: "",
        delay: 0,
        defaultValue: ""
      });
    }

    Prompt.prototype.activate = function(context) {
      var deferred, promise,
        _this = this;
      console.log("Prompting: ", this.title);
      deferred = Q.defer();
      promise = Q.delay(this.spec.delay);
      console.log("got promise");
      promise.then(function(f) {
        var result;
        result = window.prompt(_this.spec.title, _this.spec.defaultValue);
        return deferred.resolve(result);
      });
      return deferred.promise;
    };

    return Prompt;

  })(Response);

  exports.TypedResponse = TypedResponse = (function() {

    function TypedResponse(spec) {
      this.spec = spec != null ? spec : {};
      this.spec = _.defaults(this.spec, {
        left: 250,
        top: 250,
        defaultValue: ""
      });
    }

    TypedResponse.prototype.activate = function(context) {
      var cursor, deferred, enterPressed, freeText, keyStream, text, xoffset,
        _this = this;
      deferred = Q.defer();
      enterPressed = false;
      freeText = "____";
      text = new fabric.Text(freeText, {
        top: this.spec.top,
        left: this.spec.left,
        fontSize: 50,
        textAlign: "left"
      });
      context.canvas.add(text);
      xoffset = text.width / 2;
      cursor = new fabric.Line([this.spec.left, this.spec.top + text.height / 2, this.spec.left, this.spec.top - (text.height / 2)]);
      context.canvas.add(cursor);
      keyStream = context.keypressStream();
      keyStream.takeWhile(function(x) {
        return enterPressed === false;
      }).onValue(function(event) {
        var char;
        console.log("got key", event);
        if (event.keyCode === 13) {
          enterPressed = true;
          return deferred.resolve(freeText);
        } else {
          char = String.fromCharCode(event.keyCode);
          freeText = freeText + char;
          text.setText(freeText);
          text.set({
            "left": _this.spec.left + (text.width / 2 - xoffset)
          });
          console.log(text.width);
          console.log(text.height);
          return context.canvas.renderAll();
        }
      });
      return deferred.promise;
    };

    return TypedResponse;

  })();

  exports.MousepressResponse = MousepressResponse = (function(_super) {

    __extends(MousepressResponse, _super);

    function MousepressResponse() {}

    MousepressResponse.prototype.activate = function(context) {
      var deferred, mouse,
        _this = this;
      deferred = Q.defer();
      mouse = context.mousepressStream();
      mouse.stream.take(1).onValue(function(event) {
        mouse.stop();
        return deferred.resolve(event);
      });
      return deferred.promise;
    };

    return MousepressResponse;

  })(Response);

  exports.KeypressResponse = KeypressResponse = (function(_super) {

    __extends(KeypressResponse, _super);

    function KeypressResponse(keyset) {
      this.keyset = keyset;
      console.log("keyset is ", this.keyset);
    }

    KeypressResponse.prototype.activate = function(context) {
      var deferred, keyStream,
        _this = this;
      console.log("activated");
      deferred = Q.defer();
      keyStream = context.keypressStream();
      keyStream.filter(function(event) {
        var char;
        char = String.fromCharCode(event.keyCode);
        console.log("char", char);
        console.log("keyset", _this.keyset);
        return _.contains(_this.keyset, char);
      }).take(1).onValue(function(event) {
        console.log("resolving event", event.keyCode);
        return deferred.resolve(event);
      });
      return deferred.promise;
    };

    return KeypressResponse;

  })(Response);

  exports.Stimulus = Stimulus = (function() {

    function Stimulus() {}

    Stimulus.prototype.render = function(context) {};

    return Stimulus;

  })();

  exports.Sound = Sound = (function() {

    function Sound(url) {
      this.url = url;
      console.log("loading ", this.url);
      this.sound = new buzz.sound(this.url);
    }

    Sound.prototype.render = function(context) {
      return this.sound.play();
    };

    return Sound;

  })();

  exports.Blank = Blank = (function(_super) {

    __extends(Blank, _super);

    function Blank(spec) {
      this.spec = spec != null ? spec : {
        backgroundColor: 'rgb(125,0,125)'
      };
    }

    Blank.prototype.render = function(context) {
      return context.canvas.renderAll();
    };

    return Blank;

  })(Stimulus);

  exports.FixationCross = FixationCross = (function(_super) {

    __extends(FixationCross, _super);

    function FixationCross(spec) {
      this.spec = spec != null ? spec : {};
      this.spec = _.defaults(this.spec, {
        strokeWidth: 6,
        length: 100,
        fill: 'black'
      });
    }

    FixationCross.prototype.render = function(context) {
      var horz, layer, vert, x, y;
      x = context.width() / 2;
      y = context.height() / 2;
      horz = new Kinetic.Rect({
        x: x - this.spec.length / 2,
        y: y,
        width: this.spec.length,
        height: this.spec.strokeWidth,
        fill: this.spec.fill
      });
      vert = new Kinetic.Rect({
        x: x - this.spec.strokeWidth / 2,
        y: y - this.spec.length / 2 + this.spec.strokeWidth / 2,
        width: this.spec.strokeWidth,
        height: this.spec.length,
        fill: this.spec.fill
      });
      layer = new Kinetic.Layer();
      layer.add(horz);
      layer.add(vert);
      context.baseLayer.add(layer);
      return context.baseLayer.draw();
    };

    return FixationCross;

  })(Stimulus);

  exports.CanvasBorder = CanvasBorder = (function(_super) {

    __extends(CanvasBorder, _super);

    function CanvasBorder(spec) {
      this.spec = spec != null ? spec : {};
      this.spec = _.defaults(this.spec, {
        strokeWidth: 5,
        stroke: "blue"
      });
    }

    CanvasBorder.prototype.render = function(context) {
      var border;
      console.log(context.width());
      console.log(context.height());
      border = new Kinetic.Rect({
        x: 0,
        y: 0,
        width: context.width(),
        height: context.height(),
        strokeWidth: this.spec.strokeWidth,
        stroke: this.spec.stroke
      });
      context.baseLayer.add(border);
      return context.baseLayer.draw();
    };

    return CanvasBorder;

  })(Stimulus);

  exports.StartButton = StartButton = (function(_super) {

    __extends(StartButton, _super);

    function StartButton(spec) {
      this.spec = spec != null ? spec : {};
      this.spec = _.defaults(this.spec, {
        width: 150,
        height: 75
      });
    }

    StartButton.prototype.render = function(context) {
      var button, layer, text, xcenter, ycenter;
      xcenter = context.width() / 2;
      ycenter = context.height() / 2;
      text = new Kinetic.Text({
        text: "Start",
        x: xcenter - this.spec.width / 2,
        y: ycenter - this.spec.height / 2,
        width: this.spec.width,
        height: this.spec.height,
        fontSize: 30,
        fill: "white",
        fontFamily: "Arial",
        align: "center",
        padding: 20
      });
      button = new Kinetic.Rect({
        x: xcenter - this.spec.width / 2,
        y: ycenter - text.getHeight() / 2,
        width: this.spec.width,
        height: text.getHeight(),
        fill: "black",
        cornerRadius: 10,
        stroke: "LightSteelBlue",
        strokeWidth: 5
      });
      layer = new Kinetic.Layer();
      layer.add(button);
      layer.add(text);
      layer.setListening(false);
      context.baseLayer.add(layer);
      return context.baseLayer.draw();
    };

    return StartButton;

  })(Stimulus);

  exports.Text = Text = (function(_super) {

    __extends(Text, _super);

    function Text(spec) {
      this.spec = spec != null ? spec : {};
      this.spec = _.defaults(this.spec, {
        content: "Text",
        x: 100,
        y: 100,
        fill: "black",
        fontSize: 50,
        fontFamily: "Arial",
        lineHeight: 1,
        textAlign: "center"
      });
    }

    Text.prototype.render = function(context) {
      var layer, text;
      text = new Kinetic.Text({
        x: this.spec.x,
        y: this.spec.y,
        text: this.spec.content,
        fontSize: this.spec.fontSize,
        fontFamily: this.spec.fontFamily,
        fill: this.spec.fill,
        listening: false
      });
      layer = new Kinetic.Layer();
      layer.add(text);
      layer.setListening(false);
      context.baseLayer.add(layer);
      return context.baseLayer.draw();
    };

    return Text;

  })(Stimulus);

  exports.Event = Event = (function() {

    function Event(stimulus, response) {
      this.stimulus = stimulus;
      this.response = response;
    }

    Event.prototype.start = function(context) {
      console.log("starting event");
      context.baseLayer.removeChildren();
      context.eventLayer.moveToTop();
      console.log("rendering stimulus");
      this.stimulus.render(context);
      console.log("activating response");
      return this.response.activate(context);
    };

    return Event;

  })();

  exports.Trial = Trial = (function() {

    function Trial(events) {
      this.events = events != null ? events : [];
    }

    Trial.prototype.start = function(context) {
      var farray, fun, result, _i, _len,
        _this = this;
      farray = _.map(this.events, function(ev) {
        return function() {
          return ev.start(context);
        };
      });
      result = Q.resolve(0);
      for (_i = 0, _len = farray.length; _i < _len; _i++) {
        fun = farray[_i];
        result = result.then(fun);
      }
      return result;
    };

    return Trial;

  })();

  exports.KineticContext = KineticContext = (function(_super) {

    __extends(KineticContext, _super);

    function KineticContext(stage) {
      this.stage = stage;
      this.baseLayer = new Kinetic.Layer();
      this.eventLayer = new Kinetic.Layer();
      this.eventRect = new Kinetic.Rect({
        x: 0,
        y: 0,
        width: stage.getWidth(),
        height: stage.getHeight(),
        name: 'baseLayer'
      });
      this.eventLayer.add(this.eventRect);
      this.stage.add(this.baseLayer);
      this.stage.add(this.eventLayer);
      this.baseLayer.on("mousedown", function() {
        return console.log("base layer mouse down");
      });
      this.eventRect.on("mousedown", function() {
        return console.log("event rect mouse down");
      });
      this.stage.on("mousedown", function() {
        return console.log("stage mouse down");
      });
      this.stage.getContent().addEventListener('mousedown', function() {
        return console.log("stage dom click");
      });
    }

    KineticContext.prototype.width = function() {
      return this.stage.getWidth();
    };

    KineticContext.prototype.height = function() {
      return this.stage.getHeight();
    };

    KineticContext.prototype.keydownStream = function() {
      return Bacon.fromEventTarget(window, "keydown");
    };

    KineticContext.prototype.keypressStream = function() {
      return Bacon.fromEventTarget(window, "keypress");
    };

    KineticContext.prototype.mousepressStream = function() {
      var MouseBus;
      MouseBus = (function() {

        function MouseBus(eventLayer) {
          var _this = this;
          this.eventLayer = eventLayer;
          this.stream = new Bacon.Bus();
          this.handler = function(x) {
            return _this.stream.push(x);
          };
          this.eventLayer.on('mousedown', this.handler);
        }

        MouseBus.prototype.stop = function() {
          this.eventLayer.off('mousedown', this.handler);
          return this.stream.end();
        };

        return MouseBus;

      })();
      return new MouseBus(this.eventLayer);
    };

    return KineticContext;

  })(Psy.ExperimentContext);

}).call(this);
