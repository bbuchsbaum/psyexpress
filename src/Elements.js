// Generated by CoffeeScript 1.6.3
(function() {
  var AbsoluteLayout, Background, Bacon, Base, GridLayout, KineticContext, KineticStimFactory, Layout, Psy, Q, Response, Stimulus, disableBrowserBack, doTimer, getTimestamp, input, lay, li, marked, renderable, ul, utils, _, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Psy = require("./psycloud");

  Bacon = require("./lib/Bacon").Bacon;

  _ = require('lodash');

  Q = require("q");

  marked = require("marked");

  utils = require("./utils");

  lay = require("./layout");

  Base = require("./stimresp");

  Stimulus = Base.Stimulus;

  Response = Base.Response;

  Background = require("./components/canvas/Background").Background;

  _ref = require('teacup'), renderable = _ref.renderable, ul = _ref.ul, li = _ref.li, input = _ref.input;

  Layout = lay.Layout;

  AbsoluteLayout = lay.AbsoluteLayout;

  GridLayout = lay.GridLayout;

  doTimer = utils.doTimer;

  disableBrowserBack = utils.disableBrowserBack;

  getTimestamp = utils.getTimeStamp;

  exports.KineticContext = KineticContext = (function(_super) {
    __extends(KineticContext, _super);

    function KineticContext(stage) {
      this.stage = stage;
      KineticContext.__super__.constructor.call(this, new KineticStimFactory());
      this.contentLayer = new Kinetic.Layer({
        clearBeforeDraw: true
      });
      this.backgroundLayer = new Kinetic.Layer({
        clearBeforeDraw: true
      });
      this.background = new Background([], {
        fill: "white"
      });
      this.stage.add(this.backgroundLayer);
      this.stage.add(this.contentLayer);
      this.insertHTMLDiv();
    }

    KineticContext.prototype.insertHTMLDiv = function() {
      KineticContext.__super__.insertHTMLDiv.apply(this, arguments);
      return $(".kineticjs-content").css("position", "absolute");
    };

    KineticContext.prototype.setBackground = function(newBackground) {
      this.background = newBackground;
      this.backgroundLayer.removeChildren();
      return this.background.render(this, this.backgroundLayer);
    };

    KineticContext.prototype.drawBackground = function() {
      return this.backgroundLayer.draw();
    };

    KineticContext.prototype.clearBackground = function() {
      return this.backgroundLayer.removeChildren();
    };

    KineticContext.prototype.clearContent = function(draw) {
      if (draw == null) {
        draw = false;
      }
      this.clearHtml();
      this.backgroundLayer.draw();
      this.contentLayer.removeChildren();
      if (draw) {
        return this.draw();
      }
    };

    KineticContext.prototype.draw = function() {
      $('#container').focus();
      return this.contentLayer.draw();
    };

    KineticContext.prototype.width = function() {
      return this.stage.getWidth();
    };

    KineticContext.prototype.height = function() {
      return this.stage.getHeight();
    };

    KineticContext.prototype.offsetX = function() {
      return this.stage.getOffsetX();
    };

    KineticContext.prototype.offsetY = function() {
      return this.stage.getOffsetY();
    };

    KineticContext.prototype.keydownStream = function() {
      return $("body").asEventStream("keydown");
    };

    KineticContext.prototype.keypressStream = function() {
      return $("body").asEventStream("keypress");
    };

    KineticContext.prototype.mousepressStream = function() {
      var MouseBus;
      MouseBus = (function() {
        function MouseBus() {
          var _this = this;
          this.stream = new Bacon.Bus();
          this.handler = function(x) {
            return _this.stream.push(x);
          };
          this.stage.on("mousedown", this.handler);
        }

        MouseBus.prototype.stop = function() {
          this.stage.off("mousedown", this.handler);
          return this.stream.end();
        };

        return MouseBus;

      })();
      return new MouseBus();
    };

    return KineticContext;

  })(Psy.ExperimentContext);

  exports.KineticStimFactory = KineticStimFactory = (function(_super) {
    __extends(KineticStimFactory, _super);

    function KineticStimFactory() {
      _ref1 = KineticStimFactory.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    KineticStimFactory.prototype.makeLayout = function(name, params, context) {
      switch (name) {
        case "Grid":
          return new GridLayout(params[0], params[1], {
            x: 0,
            y: 0,
            width: context.width(),
            height: context.height()
          });
      }
    };

    KineticStimFactory.prototype.makeInstructions = function(spec) {
      return new Instructions(spec);
    };

    KineticStimFactory.prototype.makeStimulus = function(name, params, context) {
      var callee, i, layoutName, layoutParams, names, props, stims;
      callee = arguments.callee;
      switch (name) {
        case "FixationCross":
          return new FixationCross(params);
        case "Clear":
          return new Clear(params);
        case "Group":
          names = _.map(params.stims, function(stim) {
            return _.keys(stim)[0];
          });
          props = _.map(params.stims, function(stim) {
            return _.values(stim)[0];
          });
          stims = (function() {
            var _i, _ref2, _results;
            _results = [];
            for (i = _i = 0, _ref2 = names.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
              _results.push(callee(names[i], props[i]));
            }
            return _results;
          })();
          layoutName = _.keys(params.layout)[0];
          layoutParams = _.values(params.layout)[0];
          return new Group(stims, this.makeLayout(layoutName, layoutParams, context));
        case "Instructions":
          return new Instructions(params);
        case "Rectangle":
          return new Rectangle(params);
        case "Text":
          return new Text(params);
        case "HtmlIcon":
          return new HtmlIcon(params);
        default:
          throw "No Stimulus type of name " + name;
      }
    };

    KineticStimFactory.prototype.makeResponse = function(name, params, context) {
      console.log("making response", name);
      switch (name) {
        case "KeyPress":
          return new KeyPressResponse(params);
        case "SpaceKey":
          return new SpaceKeyResponse(params);
        case "Timeout":
          return new Timeout(params);
        default:
          throw new Error("No Response type of name " + name);
      }
    };

    KineticStimFactory.prototype.makeEvent = function(stim, response) {
      return new Psy.Event(stim, response);
    };

    return KineticStimFactory;

  })(Psy.StimFactory);

}).call(this);
