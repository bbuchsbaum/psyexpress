// Generated by CoffeeScript 1.6.3
(function() {
  var AbsoluteLayout, Background, Bacon, Base, GridLayout, KineticStimFactory, Layout, Q, Response, Stimulus, disableBrowserBack, doTimer, getTimestamp, input, lay, li, marked, renderable, ul, utils, _, _ref;

  Bacon = require("./lib/Bacon").Bacon;

  _ = require('lodash');

  Q = require("q");

  marked = require("marked");

  utils = require("./utils");

  lay = require("./layout");

  Base = require("./stimresp");

  Stimulus = Base.Stimulus;

  Response = Base.Response;

  Background = require("./components/canvas/Background").Background;

  _ref = require('teacup'), renderable = _ref.renderable, ul = _ref.ul, li = _ref.li, input = _ref.input;

  Layout = lay.Layout;

  AbsoluteLayout = lay.AbsoluteLayout;

  GridLayout = lay.GridLayout;

  doTimer = utils.doTimer;

  disableBrowserBack = utils.disableBrowserBack;

  getTimestamp = utils.getTimeStamp;

  exports.KineticStimFactory = KineticStimFactory = (function() {
    function KineticStimFactory() {
      console.log("making stim factory");
    }

    KineticStimFactory.prototype.makeLayout = function(name, params, context) {};

    KineticStimFactory.prototype.makeInstructions = function(spec) {};

    KineticStimFactory.prototype.makeStimulus = function(name, params, context) {
      /*
          layoutName = _.keys(params.layout)[0]
          layoutParams = _.values(params.layout)[0]
      
          new Group(stims, @makeLayout(layoutName, layoutParams, context))
      
        when "Instructions" then new Instructions(params)
        when "Rectangle" then new Rectangle(params)
        when "Text" then new Text(params)
        when "HtmlIcon" then new HtmlIcon(params)
      
        else throw "No Stimulus type of name #{name}"
      */

    };

    KineticStimFactory.prototype.makeResponse = function(name, params, context) {
      /*console.log("making response", name)
      switch name
        when "KeyPress" then new KeyPressResponse(params)
        when "SpaceKey" then new SpaceKeyResponse(params)
        when "Timeout" then new Timeout(params)
        else throw new Error("No Response type of name #{name}")
      */

    };

    KineticStimFactory.prototype.makeEvent = function(stim, response) {};

    return KineticStimFactory;

  })();

}).call(this);
