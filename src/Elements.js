// Generated by CoffeeScript 1.6.3
(function() {
  var AbsoluteLayout, Arrow, Background, Bacon, Blank, CanvasBorder, Circle, Clear, ClickResponse, Confirm, FirstResponse, FixationCross, GridLayout, GridLines, Group, HtmlButton, HtmlIcon, HtmlLink, HtmlStimulus, Instructions, KeyPressResponse, KineticContext, KineticStimFactory, Layout, Markdown, Message, MousePressResponse, MultipleChoice, Page, Paragraph, Picture, Prompt, Psy, Q, Rectangle, Response, Sequence, Sound, SpaceKeyResponse, StartButton, Stimulus, Text, TextInput, Timeout, TypedResponse, computeGridCells, convertPercentageToFraction, convertToCoordinate, disableBrowserBack, doTimer, elog, getTimestamp, input, isPercentage, li, markdown, position, renderable, tmp1, tmp2, tmp3, ul, _, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Psy = require("./PsyCloud");

  Bacon = require("./lib/Bacon").Bacon;

  _ = require('lodash');

  Q = require("q");

  markdown = require("./lib/markdown").markdown;

  _ref = require('teacup'), renderable = _ref.renderable, ul = _ref.ul, li = _ref.li, input = _ref.input;

  if (typeof window !== "undefined" && window !== null ? (_ref1 = window.performance) != null ? _ref1.now : void 0 : void 0) {
    console.log("Using high performance timer");
    getTimestamp = function() {
      return window.performance.now();
    };
  } else if (typeof window !== "undefined" && window !== null ? (_ref2 = window.performance) != null ? _ref2.webkitNow : void 0 : void 0) {
    console.log("Using webkit high performance timer");
    getTimestamp = function() {
      return window.performance.webkitNow();
    };
  } else {
    console.log("Using low performance timer");
    getTimestamp = function() {
      return new Date().getTime();
    };
  }

  doTimer = function(length, oncomplete) {
    var instance, start;
    start = getTimestamp();
    instance = function() {
      var diff, half;
      diff = getTimestamp() - start;
      if (diff >= length) {
        return oncomplete(diff);
      } else {
        half = Math.max((length - diff) / 2, 1);
        if (half < 20) {
          half = 1;
        }
        return setTimeout(instance, half);
      }
    };
    return setTimeout(instance, 1);
  };

  this.browserBackDisabled = false;

  disableBrowserBack = function() {
    var rx;
    if (!this.browserBackDisabled) {
      rx = /INPUT|SELECT|TEXTAREA/i;
      this.browserBackDisabled = true;
      return $(document).bind("keydown keypress", function(e) {
        if (e.which === 8) {
          if (!rx.test(e.target.tagName) || e.target.disabled || e.target.readOnly) {
            return e.preventDefault();
          }
        }
      });
    }
  };

  isPercentage = function(perc) {
    return _.isString(perc) && perc.slice(-1) === "%";
  };

  convertPercentageToFraction = function(perc, dim) {
    var frac;
    frac = parseFloat(perc) / 100;
    frac = Math.min(1, frac);
    frac = Math.max(0, frac);
    return frac * dim;
  };

  convertToCoordinate = function(val, d) {
    if (isPercentage(val)) {
      return val = convertPercentageToFraction(val, d);
    } else {
      return Math.min(val, d);
    }
  };

  computeGridCells = function(rows, cols, bounds) {
    var col, row, _i, _results;
    _results = [];
    for (row = _i = 0; 0 <= rows ? _i < rows : _i > rows; row = 0 <= rows ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = 0; 0 <= cols ? _j < cols : _j > cols; col = 0 <= cols ? ++_j : --_j) {
          _results1.push({
            x: bounds.x + bounds.width / cols * col,
            y: bounds.y + bounds.height / rows * row,
            width: bounds.width / cols,
            height: bounds.height / rows
          });
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.Layout = Layout = (function() {
    function Layout() {}

    Layout.prototype.computePosition = function(dim, stim, constraints) {};

    return Layout;

  })();

  exports.AbsoluteLayout = AbsoluteLayout = (function(_super) {
    __extends(AbsoluteLayout, _super);

    function AbsoluteLayout() {
      _ref3 = AbsoluteLayout.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    AbsoluteLayout.prototype.computePosition = function(dim, constraints) {
      var x, y;
      x = convertToCoordinate(constraints[0], dim[0]);
      y = convertToCoordinate(constraints[1], dim[1]);
      return [x, y];
    };

    return AbsoluteLayout;

  })(exports.Layout);

  exports.GridLayout = GridLayout = (function(_super) {
    __extends(GridLayout, _super);

    function GridLayout(rows, cols, bounds) {
      this.rows = rows;
      this.cols = cols;
      this.bounds = bounds;
      this.ncells = this.rows * this.cols;
      this.cells = this.computeCells();
    }

    GridLayout.prototype.computeCells = function() {
      return computeGridCells(this.rows, this.cols, this.bounds);
    };

    GridLayout.prototype.computePosition = function(dim, constraints) {
      var cell;
      if (dim[0] !== this.bounds.width && dim[1] !== this.bounds.height) {
        this.bounds.width = dim[0];
        this.bounds.height = dim[1];
        this.cells = this.computeCells();
      }
      cell = this.cells[constraints[0]][constraints[1]];
      return [cell.x + cell.width / 2, cell.y + cell.height / 2];
    };

    return GridLayout;

  })(exports.Layout);

  Stimulus = (function() {
    function Stimulus(spec, defaultArgs) {
      var _ref4;
      this.spec = _.defaults(spec, defaultArgs);
      if (((_ref4 = this.spec) != null ? _ref4.id : void 0) != null) {
        this.id = this.spec.id;
      } else {
        this.id = _.uniqueId("stim_");
      }
    }

    Stimulus.prototype.overlay = false;

    Stimulus.prototype.layout = new AbsoluteLayout();

    Stimulus.prototype.stopped = false;

    Stimulus.prototype.computeCoordinates = function(context, position) {
      var cpos;
      if (position) {
        cpos = this.layout.computePosition([context.width(), context.height()], position);
        return cpos;
      } else if (this.spec.x && this.spec.y) {
        return [this.spec.x, this.spec.y];
      } else {
        return [0, 0];
      }
    };

    Stimulus.prototype.reset = function() {
      return this.stopped = false;
    };

    Stimulus.prototype.render = function(context, layer) {};

    Stimulus.prototype.stop = function(context) {
      return this.stopped = true;
    };

    return Stimulus;

  })();

  exports.Stimulus = Stimulus;

  Response = (function(_super) {
    __extends(Response, _super);

    function Response(spec, defaultArgs) {
      Response.__super__.constructor.call(this, spec, defaultArgs);
    }

    Response.prototype.activate = function(context) {};

    return Response;

  })(Stimulus);

  exports.Response = Response;

  tmp1 = new Psy.EventData("hello", "24", {
    x: 8
  });

  tmp2 = new Psy.EventData("goodbye", "24", {
    x: 8
  });

  tmp3 = new Psy.EventData("goyyyyyy", "29", {
    x: 8
  });

  elog = new Psy.EventDataLog();

  elog.push(tmp1);

  elog.push(tmp2);

  console.log("elog last", elog.last());

  console.log("elog find last", elog.findLast("24"));

  exports.Timeout = Timeout = (function(_super) {
    __extends(Timeout, _super);

    function Timeout(spec) {
      if (spec == null) {
        spec = {};
      }
      Timeout.__super__.constructor.call(this, spec, {
        duration: 2000
      });
      this.oninstance = function(steps, count) {
        return console.log(steps, count);
      };
    }

    Timeout.prototype.activate = function(context) {
      var deferred,
        _this = this;
      deferred = Q.defer();
      doTimer(this.spec.duration, function(diff) {
        return deferred.resolve({
          timeout: diff,
          requested: _this.spec.duration
        });
      });
      return deferred.promise;
    };

    return Timeout;

  })(Response);

  exports.Prompt = Prompt = (function(_super) {
    __extends(Prompt, _super);

    function Prompt(spec) {
      if (spec == null) {
        spec = {};
      }
      Prompt.__super__.constructor.call(this, spec, {
        title: "",
        delay: 0,
        defaultValue: ""
      });
    }

    Prompt.prototype.activate = function(context) {
      var deferred, promise,
        _this = this;
      deferred = Q.defer();
      promise = Q.delay(this.spec.delay);
      promise.then(function(f) {
        return vex.dialog.prompt({
          message: _this.spec.title,
          placeholder: _this.spec.defaultValue,
          className: 'vex-theme-wireframe',
          callback: function(value) {
            return deferred.resolve(value);
          }
        });
      });
      return deferred.promise;
    };

    return Prompt;

  })(Response);

  exports.Confirm = Confirm = (function(_super) {
    __extends(Confirm, _super);

    function Confirm(spec) {
      if (spec == null) {
        spec = {};
      }
      Confirm.__super__.constructor.call(this, spec, {
        message: "",
        delay: 0,
        defaultValue: ""
      });
    }

    Confirm.prototype.activate = function(context) {
      var deferred, promise,
        _this = this;
      deferred = Q.defer();
      promise = Q.delay(this.spec.delay);
      promise.then(function(f) {
        return vex.dialog.confirm({
          message: _this.spec.message,
          className: 'vex-theme-wireframe',
          callback: function(value) {
            return deferred.resolve(value);
          }
        });
      });
      return deferred.promise;
    };

    return Confirm;

  })(Response);

  exports.TypedResponse = TypedResponse = (function() {
    function TypedResponse(spec) {
      if (spec == null) {
        spec = {};
      }
      TypedResponse.__super__.constructor.call(this, spec, {
        left: 250,
        top: 250,
        defaultValue: ""
      });
    }

    TypedResponse.prototype.activate = function(context) {
      var cursor, deferred, enterPressed, freeText, keyStream, text, xoffset,
        _this = this;
      deferred = Q.defer();
      enterPressed = false;
      freeText = "____";
      text = new fabric.Text(freeText, {
        top: this.spec.top,
        left: this.spec.left,
        fontSize: 50,
        textAlign: "left"
      });
      context.canvas.add(text);
      xoffset = text.width / 2;
      cursor = new fabric.Line([this.spec.left, this.spec.top + text.height / 2, this.spec.left, this.spec.top - (text.height / 2)]);
      context.canvas.add(cursor);
      keyStream = context.keypressStream();
      keyStream.takeWhile(function(x) {
        return enterPressed === false;
      }).onValue(function(event) {
        var char;
        if (event.keyCode === 13) {
          enterPressed = true;
          return deferred.resolve(freeText);
        } else {
          char = String.fromCharCode(event.keyCode);
          freeText = freeText + char;
          text.setText(freeText);
          text.set({
            "left": _this.spec.left + (text.width / 2 - xoffset)
          });
          console.log(text.width);
          console.log(text.height);
          return context.canvas.renderAll();
        }
      });
      return deferred.promise;
    };

    return TypedResponse;

  })();

  exports.MousePressResponse = MousePressResponse = (function(_super) {
    __extends(MousePressResponse, _super);

    function MousePressResponse() {
      MousePressResponse.__super__.constructor.call(this, {}, {});
    }

    MousePressResponse.prototype.activate = function(context) {
      var deferred, mouse,
        _this = this;
      deferred = Q.de(fer());
      mouse = context.mousepressStream();
      mouse.stream.take(1).onValue(function(event) {
        mouse.stop();
        return deferred.resolve(event);
      });
      return deferred.promise;
    };

    return MousePressResponse;

  })(Response);

  exports.KeyPressResponse = KeyPressResponse = (function(_super) {
    __extends(KeyPressResponse, _super);

    function KeyPressResponse(spec) {
      if (spec == null) {
        spec = {};
      }
      KeyPressResponse.__super__.constructor.call(this, spec, {
        keys: ['n', 'm'],
        correct: ['n'],
        timeout: 3000
      });
    }

    KeyPressResponse.prototype.activate = function(context) {
      var deferred, keyStream,
        _this = this;
      this.startTime = getTimestamp();
      deferred = Q.defer();
      keyStream = context.keypressStream();
      keyStream.filter(function(event) {
        var char;
        char = String.fromCharCode(event.keyCode);
        return _.contains(_this.spec.keys, char);
      }).take(1).onValue(function(filtered) {
        var Acc, resp, timestamp;
        Acc = _.contains(_this.spec.correct, String.fromCharCode(filtered.keyCode));
        timestamp = getTimestamp();
        resp = new Psy.EventData("KeyPress", _this.id, {
          KeyTime: timestamp,
          RT: timestamp - _this.startTime,
          Accuracy: Acc,
          KeyChar: String.fromCharCode(filtered.keyCode)
        });
        context.pushEventData(resp);
        context.logEvent("KeyPress", getTimestamp());
        context.logEvent("$ACC", Acc);
        return deferred.resolve(resp);
      });
      return deferred.promise;
    };

    return KeyPressResponse;

  })(Response);

  exports.SpaceKeyResponse = SpaceKeyResponse = (function(_super) {
    __extends(SpaceKeyResponse, _super);

    function SpaceKeyResponse(spec) {
      if (spec == null) {
        spec = {};
      }
      SpaceKeyResponse.__super__.constructor.call(this, spec, {});
    }

    SpaceKeyResponse.prototype.activate = function(context) {
      var deferred, keyStream,
        _this = this;
      deferred = Q.defer();
      keyStream = context.keypressStream();
      keyStream.filter(function(event) {
        var char;
        char = String.fromCharCode(event.keyCode);
        return event.keyCode === 32;
      }).take(1).onValue(function(event) {
        context.logEvent("SpaceKey", getTimestamp());
        return deferred.resolve(event);
      });
      return deferred.promise;
    };

    return SpaceKeyResponse;

  })(Response);

  exports.FirstResponse = FirstResponse = (function(_super) {
    __extends(FirstResponse, _super);

    function FirstResponse(responses) {
      this.responses = responses;
      FirstResponse.__super__.constructor.call(this, {}, {});
    }

    FirstResponse.prototype.activate = function(context) {
      var deferred, promises,
        _this = this;
      deferred = Q.defer();
      promises = _.map(this.responses, function(resp) {
        return resp.activate(context).then(function() {
          return deferred.resolve(resp);
        });
      });
      return deferred.promise;
    };

    return FirstResponse;

  })(Response);

  exports.ClickResponse = ClickResponse = (function(_super) {
    __extends(ClickResponse, _super);

    function ClickResponse(refid) {
      this.refid = refid;
    }

    ClickResponse.prototype.activate = function(context) {
      var deferred, element,
        _this = this;
      element = context.stage.get("#" + this.refid);
      if (!element) {
        throw "cannot find element with id" + this.refid;
      }
      deferred = Q.defer();
      element.on("click", function(ev) {
        context.logEvent("Click", getTimestamp());
        return deferred.resolve(ev);
      });
      return deferred.promise;
    };

    return ClickResponse;

  })(Response);

  exports.GridLines = GridLines = (function(_super) {
    __extends(GridLines, _super);

    function GridLines(spec) {
      if (spec == null) {
        spec = {};
      }
      GridLines.__super__.constructor.call(this, spec, {
        x: 0,
        y: 0,
        rows: 3,
        cols: 3,
        stroke: "black",
        strokeWidth: 2
      });
    }

    GridLines.prototype.render = function(context, layer) {
      var i, line, x, y, _i, _j, _ref4, _ref5, _results;
      for (i = _i = 0, _ref4 = this.spec.rows; 0 <= _ref4 ? _i <= _ref4 : _i >= _ref4; i = 0 <= _ref4 ? ++_i : --_i) {
        y = this.spec.y + (i * context.height() / this.spec.rows);
        line = new Kinetic.Line({
          points: [this.spec.x, y, this.spec.x + context.width(), y],
          stroke: this.spec.stroke,
          strokeWidth: this.spec.strokeWidth,
          dashArray: this.spec.dashArray
        });
        layer.add(line);
      }
      _results = [];
      for (i = _j = 0, _ref5 = this.spec.cols; 0 <= _ref5 ? _j <= _ref5 : _j >= _ref5; i = 0 <= _ref5 ? ++_j : --_j) {
        x = this.spec.x + (i * context.width() / this.spec.cols);
        line = new Kinetic.Line({
          points: [x, this.spec.y, x, this.spec.y + context.height()],
          stroke: this.spec.stroke,
          strokeWidth: this.spec.strokeWidth,
          dashArray: this.spec.dashArray
        });
        _results.push(layer.add(line));
      }
      return _results;
    };

    return GridLines;

  })(Stimulus);

  exports.TextInput = TextInput = (function(_super) {
    __extends(TextInput, _super);

    function TextInput(spec) {
      if (spec == null) {
        spec = {};
      }
      disableBrowserBack();
      TextInput.__super__.constructor.call(this, spec, {
        x: 100,
        y: 100,
        width: 200,
        height: 40,
        defaultValue: "",
        fill: "#FAF5E6",
        stroke: "#0099FF",
        strokeWidth: 1,
        content: ""
      });
    }

    TextInput.prototype.getChar = function(e) {
      if (e.keyCode !== 16) {
        if (e.keyCode >= 65 && e.keyCode <= 90) {
          if (e.shiftKey) {
            return String.fromCharCode(e.keyCode);
          } else {
            return String.fromCharCode(e.keyCode + 32);
          }
        } else if (e.keyCode >= 48 && e.keyCode <= 57) {
          return String.fromCharCode(e.keyCode);
        } else {
          switch (e.keyCode) {
            case 186:
              return ";";
            case 187:
              return "=";
            case 188:
              return ",";
            case 189:
              return "-";
            default:
              return "";
          }
        }
      } else {
        return String.fromCharCode(e.keyCode);
      }
    };

    TextInput.prototype.animateCursor = function(layer, cursor) {
      var flashTime,
        _this = this;
      flashTime = 0;
      return new Kinetic.Animation(function(frame) {
        if (frame.time > (flashTime + 500)) {
          flashTime = frame.time;
          if (cursor.getOpacity() === 1) {
            cursor.setOpacity(0);
          } else {
            cursor.setOpacity(1);
          }
          return layer.draw();
        }
      }, layer);
    };

    TextInput.prototype.render = function(context, layer) {
      var cursor, cursorBlink, enterPressed, fsize, group, keyStream, text, textContent, textRect,
        _this = this;
      textRect = new Kinetic.Rect({
        x: this.spec.x,
        y: this.spec.y,
        width: this.spec.width,
        height: this.spec.height,
        fill: this.spec.fill,
        cornerRadius: 4,
        lineJoin: "round",
        stroke: this.spec.stroke,
        strokeWidth: this.spec.strokeWidth
      });
      textContent = this.spec.content;
      fsize = .85 * this.spec.height;
      text = new Kinetic.Text({
        text: this.spec.content,
        x: this.spec.x + 2,
        y: this.spec.y - 5,
        height: this.spec.height,
        fontSize: fsize,
        fill: "black",
        padding: 10,
        align: "left"
      });
      cursor = new Kinetic.Rect({
        x: text.getX() + text.getWidth() - 7,
        y: this.spec.y + 5,
        width: 1.5,
        height: text.getHeight() - 10,
        fill: "black"
      });
      enterPressed = false;
      keyStream = context.keydownStream();
      keyStream.takeWhile(function(x) {
        return enterPressed === false && !_this.stopped;
      }).onValue(function(event) {
        var char;
        if (event.keyCode === 13) {
          return enterPressed = true;
        } else if (event.keyCode === 8) {
          textContent = textContent.slice(0, -1);
          text.setText(textContent);
          cursor.setX(text.getX() + text.getWidth() - 7);
          return layer.draw();
        } else if (text.getWidth() > textRect.getWidth()) {

        } else {
          char = _this.getChar(event);
          textContent += char;
          text.setText(textContent);
          cursor.setX(text.getX() + text.getWidth() - 7);
          return layer.draw();
        }
      });
      cursorBlink = this.animateCursor(layer, cursor);
      cursorBlink.start();
      group = new Kinetic.Group({});
      group.add(textRect);
      group.add(cursor);
      group.add(text);
      return layer.add(group);
    };

    return TextInput;

  })(Stimulus);

  exports.Sound = Sound = (function() {
    function Sound(url) {
      this.url = url;
      this.sound = new buzz.sound(this.url);
    }

    Sound.prototype.render = function(context) {
      return this.sound.play();
    };

    return Sound;

  })();

  exports.Picture = Picture = (function(_super) {
    __extends(Picture, _super);

    function Picture(spec) {
      var _this = this;
      if (spec == null) {
        spec = {};
      }
      Picture.__super__.constructor.call(this, spec, {
        url: "http://www.html5canvastutorials.com/demos/assets/yoda.jpg",
        x: 0,
        y: 0
      });
      this.imageObj = new Image();
      this.image = null;
      this.imageObj.onload = function() {
        return _this.image = new Kinetic.Image({
          x: _this.spec.x,
          y: _this.spec.y,
          image: _this.imageObj,
          width: _this.spec.width || _this.imageObj.width,
          height: _this.spec.height || _this.imageObj.height
        });
      };
      this.imageObj.src = this.spec.url;
    }

    Picture.prototype.render = function(context, layer) {
      return layer.add(this.image);
    };

    return Picture;

  })(Stimulus);

  exports.Group = Group = (function(_super) {
    __extends(Group, _super);

    function Group(stims, layout) {
      var stim, _i, _len, _ref4;
      this.stims = stims;
      Group.__super__.constructor.call(this, {}, {});
      if (layout) {
        this.layout = layout;
        _ref4 = this.stims;
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          stim = _ref4[_i];
          stim.layout = layout;
        }
      }
    }

    Group.prototype.render = function(context, layer) {
      var stim, _i, _len, _ref4, _results;
      _ref4 = this.stims;
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        stim = _ref4[_i];
        _results.push(stim.render(context, layer));
      }
      return _results;
    };

    return Group;

  })(Stimulus);

  exports.Background = Background = (function(_super) {
    __extends(Background, _super);

    function Background(stims, fill) {
      this.stims = stims != null ? stims : [];
      this.fill = fill != null ? fill : "white";
      Background.__super__.constructor.call(this, {}, {});
    }

    Background.prototype.render = function(context, layer) {
      var background, stim, _i, _len, _ref4, _results;
      background = new Kinetic.Rect({
        x: 0,
        y: 0,
        width: context.width(),
        height: context.height(),
        name: 'background',
        fill: this.fill
      });
      layer.add(background);
      _ref4 = this.stims;
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        stim = _ref4[_i];
        _results.push(stim.render(context, layer));
      }
      return _results;
    };

    return Background;

  })(Stimulus);

  exports.Sequence = Sequence = (function(_super) {
    __extends(Sequence, _super);

    function Sequence(stims, soa, clear, times) {
      var i;
      this.stims = stims;
      this.soa = soa;
      this.clear = clear != null ? clear : true;
      this.times = times != null ? times : 1;
      Sequence.__super__.constructor.call(this, {}, {});
      if (this.soa.length !== this.stims.length) {
        this.soa = Psy.repLen(this.soa, this.stims.length);
      }
      this.onsets = (function() {
        var _i, _ref4, _results;
        _results = [];
        for (i = _i = 0, _ref4 = this.soa.length; 0 <= _ref4 ? _i < _ref4 : _i > _ref4; i = 0 <= _ref4 ? ++_i : --_i) {
          _results.push(_.reduce(this.soa.slice(0, +i + 1 || 9e9), function(x, acc) {
            return x + acc;
          }));
        }
        return _results;
      }).call(this);
    }

    Sequence.prototype.genseq = function(context, layer) {
      var deferred, _i, _ref4, _results,
        _this = this;
      deferred = Q.defer();
      _.forEach((function() {
        _results = [];
        for (var _i = 0, _ref4 = this.stims.length; 0 <= _ref4 ? _i < _ref4 : _i > _ref4; 0 <= _ref4 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), function(i) {
        var ev, stim;
        console.log("genseq", i);
        ev = new Timeout({
          duration: _this.onsets[i]
        });
        stim = _this.stims[i];
        return ev.activate(context).then(function() {
          if (!_this.stopped) {
            if (_this.clear) {
              context.clearContent();
            }
            stim.render(context, layer);
            context.draw();
          }
          if (i === _this.stims.length - 1) {
            return deferred.resolve(1);
          }
        });
      });
      return deferred.promise;
    };

    Sequence.prototype.render = function(context, layer) {
      var i, result, _i, _ref4,
        _this = this;
      result = Q.resolve(0);
      for (i = _i = 0, _ref4 = this.times; 0 <= _ref4 ? _i < _ref4 : _i > _ref4; i = 0 <= _ref4 ? ++_i : --_i) {
        result = result.then(function() {
          return _this.genseq(context, layer);
        });
      }
      return result;
    };

    return Sequence;

  })(Stimulus);

  exports.Blank = Blank = (function(_super) {
    __extends(Blank, _super);

    function Blank(spec) {
      if (spec == null) {
        spec = {};
      }
      Blank.__super__.constructor.call(this, spec, {
        fill: "white"
      });
    }

    Blank.prototype.render = function(context, layer) {
      var blank;
      blank = new Kinetic.Rect({
        x: 0,
        y: 0,
        width: context.width(),
        height: context.height(),
        fill: this.spec.fill
      });
      return layer.add(blank);
    };

    return Blank;

  })(Stimulus);

  exports.Clear = Clear = (function(_super) {
    __extends(Clear, _super);

    function Clear(spec) {
      if (spec == null) {
        spec = {};
      }
      Clear.__super__.constructor.call(this, spec, {});
    }

    Clear.prototype.render = function(context, layer) {
      return context.clearContent(true);
    };

    return Clear;

  })(Stimulus);

  exports.Arrow = Arrow = (function(_super) {
    __extends(Arrow, _super);

    function Arrow(spec) {
      if (spec == null) {
        spec = {};
      }
      Arrow.__super__.constructor.call(this, spec, {
        x: 100,
        y: 100,
        length: 100,
        angle: 0,
        thickness: 40,
        fill: "red",
        arrowSize: 50
      });
    }

    Arrow.prototype.render = function(context, layer) {
      var group, rect, triangle, _this;
      rect = new Kinetic.Rect({
        x: 0,
        y: 0,
        width: this.spec.length,
        height: this.spec.thickness,
        fill: this.spec.fill,
        stroke: this.spec.stroke,
        strokeWidth: this.spec.strokeWidth,
        opacity: this.spec.opacity
      });
      _this = this;
      triangle = new Kinetic.Shape({
        drawFunc: function(cx) {
          cx.beginPath();
          cx.moveTo(_this.spec.length, -_this.spec.arrowSize / 2.0);
          cx.lineTo(_this.spec.length + _this.spec.arrowSize, _this.spec.thickness / 2.0);
          cx.lineTo(_this.spec.length, _this.spec.thickness + _this.spec.arrowSize / 2.0);
          cx.closePath();
          return cx.fillStrokeShape(this);
        },
        fill: _this.spec.fill,
        stroke: this.spec.stroke,
        strokeWidth: this.spec.strokeWidth,
        opacity: this.spec.opacity
      });
      group = new Kinetic.Group({
        x: this.spec.x,
        y: this.spec.y,
        rotationDeg: this.spec.angle,
        offset: [0, this.spec.thickness / 2.0]
      });
      group.add(rect);
      group.add(triangle);
      return layer.add(group);
    };

    return Arrow;

  })(Stimulus);

  exports.Rectangle = Rectangle = (function(_super) {
    __extends(Rectangle, _super);

    function Rectangle(spec) {
      if (spec == null) {
        spec = {};
      }
      Rectangle.__super__.constructor.call(this, spec, {
        x: 0,
        y: 0,
        width: 100,
        height: 100,
        fill: 'red'
      });
      this.spec = _.omit(this.spec, function(value, key) {
        return !value;
      });
      if (this.spec.layout != null) {
        this.layout = this.spec.layout;
      }
    }

    Rectangle.prototype.render = function(context, layer) {
      var coords, rect;
      coords = this.computeCoordinates(context, this.spec.position);
      rect = new Kinetic.Rect({
        x: coords[0],
        y: coords[1],
        width: this.spec.width,
        height: this.spec.height,
        fill: this.spec.fill,
        stroke: this.spec.stroke,
        strokeWidth: this.spec.strokeWidth
      });
      return layer.add(rect);
    };

    return Rectangle;

  })(Stimulus);

  exports.Circle = Circle = (function(_super) {
    __extends(Circle, _super);

    function Circle(spec) {
      if (spec == null) {
        spec = {};
      }
      Circle.__super__.constructor.call(this, spec, {
        x: 100,
        y: 100,
        radius: 50,
        fill: 'red',
        opacity: 1
      });
    }

    Circle.prototype.render = function(context, layer) {
      var circ;
      circ = new Kinetic.Circle({
        x: this.spec.x,
        y: this.spec.y,
        radius: this.spec.radius,
        fill: this.spec.fill,
        stroke: this.spec.stroke,
        strokeWidth: this.spec.strokeWidth,
        opacity: this.spec.opacity
      });
      return layer.add(circ);
    };

    return Circle;

  })(Stimulus);

  exports.FixationCross = FixationCross = (function(_super) {
    __extends(FixationCross, _super);

    function FixationCross(spec) {
      if (spec == null) {
        spec = {};
      }
      FixationCross.__super__.constructor.call(this, spec, {
        strokeWidth: 8,
        length: 150,
        fill: 'black'
      });
    }

    FixationCross.prototype.render = function(context, layer) {
      var group, horz, vert, x, y;
      x = context.width() / 2;
      y = context.height() / 2;
      horz = new Kinetic.Rect({
        x: x - this.spec.length / 2,
        y: y,
        width: this.spec.length,
        height: this.spec.strokeWidth,
        fill: this.spec.fill
      });
      vert = new Kinetic.Rect({
        x: x - this.spec.strokeWidth / 2,
        y: y - this.spec.length / 2 + this.spec.strokeWidth / 2,
        width: this.spec.strokeWidth,
        height: this.spec.length,
        fill: this.spec.fill
      });
      group = new Kinetic.Group();
      group.add(horz);
      group.add(vert);
      return layer.add(group);
    };

    return FixationCross;

  })(Stimulus);

  exports.CanvasBorder = CanvasBorder = (function(_super) {
    __extends(CanvasBorder, _super);

    function CanvasBorder(spec) {
      if (spec == null) {
        spec = {};
      }
      CanvasBorder.__super__.constructor.call(this, spec, {
        strokeWidth: 5,
        stroke: "black"
      });
    }

    CanvasBorder.prototype.render = function(context, layer) {
      var border;
      border = new Kinetic.Rect({
        x: 0,
        y: 0,
        width: context.width(),
        height: context.height(),
        strokeWidth: this.spec.strokeWidth,
        stroke: this.spec.stroke
      });
      return layer.add(border);
    };

    return CanvasBorder;

  })(Stimulus);

  exports.StartButton = StartButton = (function(_super) {
    __extends(StartButton, _super);

    function StartButton(spec) {
      if (spec == null) {
        spec = {};
      }
      StartButton.__super__.constructor.call(this, spec, {
        width: 150,
        height: 75
      });
    }

    StartButton.prototype.render = function(context, layer) {
      var button, group, text, xcenter, ycenter;
      xcenter = context.width() / 2;
      ycenter = context.height() / 2;
      group = new Kinetic.Group({
        id: this.spec.id
      });
      text = new Kinetic.Text({
        text: "Start",
        x: xcenter - this.spec.width / 2,
        y: ycenter - this.spec.height / 2,
        width: this.spec.width,
        height: this.spec.height,
        fontSize: 30,
        fill: "white",
        fontFamily: "Arial",
        align: "center",
        padding: 20
      });
      button = new Kinetic.Rect({
        x: xcenter - this.spec.width / 2,
        y: ycenter - text.getHeight() / 2,
        width: this.spec.width,
        height: text.getHeight(),
        fill: "black",
        cornerRadius: 10,
        stroke: "LightSteelBlue",
        strokeWidth: 5
      });
      group.add(button);
      group.add(text);
      return layer.add(group);
    };

    return StartButton;

  })(Stimulus);

  position = function(pos, offx, offy, width, height, xy) {
    switch (pos) {
      case "center":
        return [offx + width * .5, offy + height * .5];
      case "center-left" || "left-center":
        return [offx + width * 1 / 6, offy + height * .5];
      case "center-right" || "right-center":
        return [offx + width * 5 / 6, offy + height * .5];
      case "top-left" || "left-top":
        return [offx + width * 1 / 6, offy + height * 1 / 6];
      case "top-right" || "right-top":
        return [offx + width * 5 / 6, offy + height * 1 / 6];
      case "top-center" || "center-top":
        return [offx + width * .5, offy + height * 1 / 6];
      case "bottom-left" || "left-bottom":
        return [offx + width * 1 / 6, offy + height * 5 / 6];
      case "bottom-right" || "right-bottom":
        return [offx + width * 5 / 6, offy + height * 5 / 6];
      case "bottom-center" || "center-bottom":
        return [offx + width * .5, offy + height * 5 / 6];
      default:
        return xy;
    }
  };

  exports.Text = Text = (function(_super) {
    __extends(Text, _super);

    function Text(spec) {
      if (spec == null) {
        spec = {};
      }
      Text.__super__.constructor.call(this, spec, {
        content: "Text",
        x: 5,
        y: 5,
        width: null,
        fill: "black",
        fontSize: 40,
        fontFamily: "Arial",
        lineHeight: 2,
        textAlign: "center",
        position: null
      });
      if (_.isArray(this.spec.content)) {
        this.spec.content = this.spec.content.join("\n");
      }
    }

    Text.prototype.render = function(context, layer) {
      var text, xy;
      text = new Kinetic.Text({
        x: this.spec.x,
        y: this.spec.y,
        text: this.spec.content,
        fontSize: this.spec.fontSize,
        fontFamily: this.spec.fontFamily,
        fill: this.spec.fill,
        lineHeight: this.spec.lineHeight,
        width: this.spec.width || context.width(),
        listening: false,
        align: this.spec.textAlign
      });
      if (this.spec.position) {
        xy = position(this.spec.position, -text.getWidth() / 2, -text.getHeight() / 2, context.width(), context.height(), [this.spec.x, this.spec.y]);
        text.setPosition({
          x: xy[0],
          y: xy[1]
        });
      }
      return layer.add(text);
    };

    return Text;

  })(Stimulus);

  exports.Paragraph = Paragraph = (function(_super) {
    __extends(Paragraph, _super);

    function Paragraph(spec) {
      if (spec == null) {
        spec = {};
      }
      Paragraph.__super__.constructor.call(this, spec, {
        content: "",
        x: 50,
        y: 50,
        width: 600,
        fill: "black",
        fontSize: 18,
        fontFamily: "Arial",
        lineHeight: 1,
        textAlign: "center",
        position: null
      });
    }

    return Paragraph;

  })(Stimulus);

  exports.Markdown = Markdown = (function(_super) {
    __extends(Markdown, _super);

    function Markdown(spec) {
      var _this = this;
      if (spec == null) {
        spec = {};
      }
      Markdown.__super__.constructor.call(this, spec, {});
      if (_.isString(spec)) {
        this.spec = {};
        this.spec.content = spec;
      }
      this.html = $("<div></div>");
      if (this.spec.url != null) {
        $.ajax({
          url: this.spec.url,
          success: function(result) {
            _this.spec.content = result;
            return _this.html.append(markdown.toHTML(_this.spec.content));
          },
          error: function(result) {
            return console.log("ajax failure", result);
          }
        });
      } else {
        this.html.append($(markdown.toHTML(this.spec.content)));
      }
      this.html.addClass("markdown");
    }

    Markdown.prototype.render = function(context, layer) {
      console.log(this.html);
      context.clearHtml();
      return context.appendHtml(this.html);
    };

    return Markdown;

  })(exports.Stimulus);

  exports.Message = Message = (function(_super) {
    __extends(Message, _super);

    function Message(spec) {
      if (spec == null) {
        spec = {};
      }
      Message.__super__.constructor.call(this, spec, {
        title: "Message!",
        content: "your content here",
        color: "",
        size: "large"
      });
      this.message = $("<div></div>").addClass(this.messageClass());
      this.title = $("<div>" + this.spec.title + "</div>").addClass("header");
      this.content = $("<p>" + this.spec.content + "</p>");
      this.message.append(this.title);
      this.message.append(this.content);
    }

    Message.prototype.messageClass = function() {
      return "ui message " + this.spec.color + " " + this.spec.size;
    };

    Message.prototype.render = function(context, layer) {
      console.log(this.message.html());
      return context.appendHtml(this.message);
    };

    return Message;

  })(Stimulus);

  exports.Page = Page = (function(_super) {
    __extends(Page, _super);

    function Page(spec) {
      if (spec == null) {
        spec = {};
      }
      Page.__super__.constructor.call(this, spec, {
        html: "<div>HTML Page</div>"
      });
      this.html = this.spec.html;
    }

    Page.prototype.render = function(context, layer) {
      return context.appendHtml(this.html);
    };

    return Page;

  })(Stimulus);

  exports.Instructions = Instructions = (function(_super) {
    __extends(Instructions, _super);

    function Instructions(spec) {
      var content, div, i, itm, key, md, type, value;
      if (spec == null) {
        spec = {};
      }
      Instructions.__super__.constructor.call(this, spec, {});
      this.pages = (function() {
        var _ref4, _results;
        _ref4 = this.spec.pages;
        _results = [];
        for (key in _ref4) {
          value = _ref4[key];
          type = _.keys(value)[0];
          content = _.values(value)[0];
          console.log("type", type);
          console.log("value", value);
          md = new Markdown(content);
          div = $("<div></div>");
          _results.push($(div).addClass("ui stacked segment").append(md.html));
        }
        return _results;
      }).call(this);
      this.menu = $("<div></div>").addClass("ui borderless pagination menu");
      this.back = $("<a class=\"item\">\n  <i class=\"icon left arrow\"></i>  Previous\n </a>").attr("id", "instructions_back");
      this.next = $("<a class=\"item\">\nNext <i class=\"icon right arrow\"></i>\n</a>").attr("id", "instructions_next");
      this.menu.append(this.back).append("\n");
      this.items = (function() {
        var _i, _ref4, _results;
        _results = [];
        for (i = _i = 1, _ref4 = this.pages.length; 1 <= _ref4 ? _i <= _ref4 : _i >= _ref4; i = 1 <= _ref4 ? ++_i : --_i) {
          itm = $("<a class=\"item\">" + i + "</a>");
          this.menu.append(itm).append("\n");
          _results.push(itm);
        }
        return _results;
      }).call(this);
      this.items[0].addClass("active");
      this.menu.append(this.next).css("position", "absolute").css("right", "15px");
      this.currentPage = 0;
    }

    Instructions.prototype.activate = function(context) {
      this.deferred = Q.defer();
      return this.deferred.promise;
    };

    Instructions.prototype.render = function(context, layer) {
      var _this = this;
      this.next.click(function(e) {
        if (_this.currentPage < (_this.pages.length - 1)) {
          _this.items[_this.currentPage].removeClass("active");
          _this.currentPage += 1;
          _this.items[_this.currentPage].addClass("active");
          context.clearHtml();
          return _this.render(context);
        } else {
          return _this.deferred.resolve(0);
        }
      });
      this.back.click(function(e) {
        console.log("back click!");
        if (_this.currentPage > 0) {
          _this.items[_this.currentPage].removeClass("active");
          _this.currentPage -= 1;
          _this.items[_this.currentPage].addClass("active");
          context.clearHtml();
          return _this.render(context);
        }
      });
      if (this.currentPage > 0) {
        this.back.removeClass("disabled");
      }
      $(this.pages[this.currentPage]).css({
        "min-height": context.height() - 50
      });
      context.appendHtml(this.pages[this.currentPage]);
      return context.appendHtml(this.menu);
    };

    return Instructions;

  })(Response);

  exports.HtmlStimulus = HtmlStimulus = (function(_super) {
    __extends(HtmlStimulus, _super);

    function HtmlStimulus(spec, defargs) {
      if (spec == null) {
        spec = {};
      }
      if (defargs == null) {
        defargs = {};
      }
      HtmlStimulus.__super__.constructor.call(this, spec, defargs);
    }

    HtmlStimulus.prototype.positionElement = function(element) {
      if ((this.spec.x != null) && (this.spec.y != null)) {
        return element.css({
          position: "absolute",
          left: this.spec.x,
          top: this.spec.y
        });
      }
    };

    HtmlStimulus.prototype.centerElement = function(element) {
      return element.css({
        margin: "0 auto",
        position: "absolute",
        left: "50%",
        top: "50%"
      });
    };

    return HtmlStimulus;

  })(Stimulus);

  exports.HtmlIcon = HtmlIcon = (function(_super) {
    __extends(HtmlIcon, _super);

    function HtmlIcon(spec) {
      if (spec == null) {
        spec = {};
      }
      HtmlIcon.__super__.constructor.call(this, spec, {
        glyph: "plane",
        size: "massive"
      });
      this.html = $("<i></i>");
      this.html.addClass(this.spec.glyph + " " + this.spec.size + " icon");
      this.positionElement(this.html);
    }

    HtmlIcon.prototype.render = function(context, layer) {
      context.appendHtml(this.html);
      console.log("width of icon is", $(this.html).width());
      return console.log("height of icon is", $(this.html).height());
    };

    return HtmlIcon;

  })(HtmlStimulus);

  exports.HtmlLink = HtmlLink = (function(_super) {
    __extends(HtmlLink, _super);

    function HtmlLink(spec) {
      if (spec == null) {
        spec = {};
      }
      HtmlLink.__super__.constructor.call(this, spec, {
        label: "link"
      });
      this.html = $("<a href='#'>" + this.spec.label + "</a>");
      if ((this.spec.x != null) && this.spec.y) {
        this.html.css({
          position: "absolute",
          left: this.spec.x,
          top: this.spec.y
        });
      }
    }

    HtmlLink.prototype.render = function(context, layer) {
      return context.appendHtml(this.html);
    };

    return HtmlLink;

  })(exports.Stimulus);

  exports.HtmlButton = HtmlButton = (function(_super) {
    __extends(HtmlButton, _super);

    function HtmlButton(spec) {
      if (spec == null) {
        spec = {};
      }
      HtmlButton.__super__.constructor.call(this, spec, {
        label: "Next",
        "class": ""
      });
      this.html = $("<div class='ui button'>\n" + this.spec.label + "</div>");
      if ((this.spec.x != null) && this.spec.y) {
        this.html.css({
          position: "absolute",
          left: this.spec.x,
          top: this.spec.y
        }).addClass(this.spec["class"]);
      }
    }

    HtmlButton.prototype.render = function(context, layer) {
      return context.appendHtml(this.html);
    };

    return HtmlButton;

  })(Stimulus);

  exports.MultipleChoice = MultipleChoice = (function(_super) {
    __extends(MultipleChoice, _super);

    function MultipleChoice(spec) {
      if (spec == null) {
        spec = {};
      }
      MultipleChoice.__super__.constructor.call(this, spec, {
        question: "What is your name?",
        options: ["Bill", "John", "Fred"],
        x: 10,
        y: 10,
        fill: "black",
        fontSize: 24,
        fontFamily: "Arial",
        textAlign: "center",
        position: null
      });
    }

    MultipleChoice.prototype.render = function(context, layer) {
      var choice, i, questionText, _i, _ref4, _results;
      questionText = new Kinetic.Text({
        x: this.spec.x,
        y: this.spec.y,
        text: this.spec.question,
        fontSize: this.spec.fontSize,
        fontFamily: this.spec.fontFamily,
        fill: this.spec.fill
      });
      layer.add(questionText);
      _results = [];
      for (i = _i = 0, _ref4 = this.spec.options.length; 0 <= _ref4 ? _i < _ref4 : _i > _ref4; i = 0 <= _ref4 ? ++_i : --_i) {
        choice = new Kinetic.Text({
          x: this.spec.x + 5,
          y: questionText.getHeight() * (i + 1) + 30,
          text: (i + 1) + ") " + this.spec.options[i],
          fontSize: this.spec.fontSize,
          fontFamily: this.spec.fontFamily,
          fill: this.spec.fill,
          padding: 20,
          align: 'left'
        });
        _results.push(layer.add(choice));
      }
      return _results;
    };

    return MultipleChoice;

  })(Stimulus);

  exports.KineticContext = KineticContext = (function(_super) {
    __extends(KineticContext, _super);

    function KineticContext(stage) {
      this.stage = stage;
      KineticContext.__super__.constructor.call(this, new KineticStimFactory());
      this.contentLayer = new Kinetic.Layer({
        clearBeforeDraw: true
      });
      this.backgroundLayer = new Kinetic.Layer({
        clearBeforeDraw: true
      });
      this.background = new Background([], {
        fill: "white"
      });
      this.stage.add(this.backgroundLayer);
      this.stage.add(this.contentLayer);
      this.backgroundLayer.on("click", function() {
        return console.log("background layer click");
      });
      this.stage.on("mousedown", function() {
        return console.log("stage mouse down");
      });
      this.stage.getContent().addEventListener('mousedown', function() {
        return console.log("stage dom click");
      });
      this.insertHTMLDiv();
      $("document").keydown(function() {
        return console.log("container key down!!!!");
      });
    }

    KineticContext.prototype.insertHTMLDiv = function() {
      $("canvas").css("position", "absolute");
      $(".kineticjs-content").css("position", "absolute");
      $("#container").append("<div id=\"htmlcontainer\" class=\"htmllayer\"></div>");
      $("#htmlcontainer").css({
        position: "absolute",
        "z-index": 999,
        outline: "none",
        padding: "5px"
      });
      $("#container").attr("tabindex", 0);
      $("#container").css("outline", "none");
      return $("#container").css("padding", "5px");
    };

    KineticContext.prototype.clearHtml = function() {
      $("#htmlcontainer").empty();
      return $("#htmlcontainer").hide();
    };

    KineticContext.prototype.appendHtml = function(input) {
      $("#htmlcontainer").addClass("htmllayer");
      $("#htmlcontainer").append(input);
      return $("#htmlcontainer").show();
    };

    KineticContext.prototype.hideHtml = function() {
      return $("#htmlcontainer").hide();
    };

    KineticContext.prototype.setBackground = function(newBackground) {
      this.background = newBackground;
      this.backgroundLayer.removeChildren();
      return this.background.render(this, this.backgroundLayer);
    };

    KineticContext.prototype.drawBackground = function() {
      return this.backgroundLayer.draw();
    };

    KineticContext.prototype.clearBackground = function() {
      return this.backgroundLayer.removeChildren();
    };

    KineticContext.prototype.clearContent = function(draw) {
      if (draw == null) {
        draw = false;
      }
      this.clearHtml();
      this.contentLayer.removeChildren();
      if (draw) {
        return this.draw();
      }
    };

    KineticContext.prototype.draw = function() {
      $('#container').focus();
      this.backgroundLayer.draw();
      return this.contentLayer.draw();
    };

    KineticContext.prototype.width = function() {
      return this.stage.getWidth();
    };

    KineticContext.prototype.height = function() {
      return this.stage.getHeight();
    };

    KineticContext.prototype.offsetX = function() {
      return this.stage.getOffsetX();
    };

    KineticContext.prototype.offsetY = function() {
      return this.stage.getOffsetY();
    };

    KineticContext.prototype.keydownStream = function() {
      return $("body").asEventStream("keydown");
    };

    KineticContext.prototype.keypressStream = function() {
      return $("body").asEventStream("keypress");
    };

    KineticContext.prototype.mousepressStream = function() {
      var MouseBus;
      MouseBus = (function() {
        function MouseBus() {
          var _this = this;
          this.stream = new Bacon.Bus();
          this.handler = function(x) {
            return _this.stream.push(x);
          };
          this.stage.on("mousedown", this.handler);
        }

        MouseBus.prototype.stop = function() {
          this.stage.off("mousedown", this.handler);
          return this.stream.end();
        };

        return MouseBus;

      })();
      return new MouseBus();
    };

    return KineticContext;

  })(Psy.ExperimentContext);

  exports.KineticStimFactory = KineticStimFactory = (function(_super) {
    __extends(KineticStimFactory, _super);

    function KineticStimFactory() {
      _ref4 = KineticStimFactory.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    KineticStimFactory.prototype.makeLayout = function(name, params, context) {
      switch (name) {
        case "Grid":
          return new GridLayout(params[0], params[1], {
            x: 0,
            y: 0,
            width: context.width(),
            height: context.height()
          });
      }
    };

    KineticStimFactory.prototype.makeInstructions = function(spec) {
      return new Instructions(spec);
    };

    KineticStimFactory.prototype.makeStimulus = function(name, params, context) {
      var callee, i, layoutName, layoutParams, names, props, stims;
      callee = arguments.callee;
      switch (name) {
        case "FixationCross":
          return new FixationCross(params);
        case "Clear":
          return new Clear(params);
        case "Group":
          names = _.map(params.stims, function(stim) {
            return _.keys(stim)[0];
          });
          props = _.map(params.stims, function(stim) {
            return _.values(stim)[0];
          });
          stims = (function() {
            var _i, _ref5, _results;
            _results = [];
            for (i = _i = 0, _ref5 = names.length; 0 <= _ref5 ? _i < _ref5 : _i > _ref5; i = 0 <= _ref5 ? ++_i : --_i) {
              _results.push(callee(names[i], props[i]));
            }
            return _results;
          })();
          layoutName = _.keys(params.layout)[0];
          layoutParams = _.values(params.layout)[0];
          return new Group(stims, this.makeLayout(layoutName, layoutParams, context));
        case "Instructions":
          return new Instructions(params);
        case "Rectangle":
          return new Rectangle(params);
        case "Text":
          return new Text(params);
        case "HtmlIcon":
          return new HtmlIcon(params);
        default:
          throw "No Stimulus type of name " + name;
      }
    };

    KineticStimFactory.prototype.makeResponse = function(name, params, context) {
      console.log("making response", name);
      switch (name) {
        case "KeyPress":
          return new KeyPressResponse(params);
        case "SpaceKey":
          return new SpaceKeyResponse(params);
        case "Timeout":
          return new Timeout(params);
        default:
          throw new Error("No Response type of name " + name);
      }
    };

    KineticStimFactory.prototype.makeEvent = function(stim, response) {
      return new Psy.Event(stim, response);
    };

    return KineticStimFactory;

  })(Psy.StimFactory);

}).call(this);

/*
//@ sourceMappingURL=Elements.map
*/
